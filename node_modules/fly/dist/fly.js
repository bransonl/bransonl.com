"use strict";

var _get = require("babel-runtime/helpers/get")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _defineProperty = require("babel-runtime/helpers/define-property")["default"];

var _toConsumableArray = require("babel-runtime/helpers/to-consumable-array")["default"];

var _regeneratorRuntime = require("babel-runtime/regenerator")["default"];

var _Object$assign2 = require("babel-runtime/core-js/object/assign")["default"];

var _Object$keys = require("babel-runtime/core-js/object/keys")["default"];

var _Promise = require("babel-runtime/core-js/promise")["default"];

var _Object$create = require("babel-runtime/core-js/object/create")["default"];

var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];

var _Symbol$iterator = require("babel-runtime/core-js/symbol/iterator")["default"];

var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

Object.defineProperty(exports, "__esModule", {
  value: true
});
var marked0$0 = [resolve].map(_regeneratorRuntime.mark);

var _co = require("co");

var _co2 = _interopRequireDefault(_co);

var _debug = require("debug");

var _debug2 = _interopRequireDefault(_debug);

var _rimraf = require("rimraf");

var _rimraf2 = _interopRequireDefault(_rimraf);

var _mkdirp = require("mkdirp");

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _chokidar = require("chokidar");

var _chokidar2 = _interopRequireDefault(_chokidar);

var _emitter = require("./emitter");

var _emitter2 = _interopRequireDefault(_emitter);

var _concatWithSourcemaps = require("concat-with-sourcemaps");

var _concatWithSourcemaps2 = _interopRequireDefault(_concatWithSourcemaps);

var _path = require("path");

var _mzFs = require("mz/fs");

var _flyUtil = require("fly-util");

var _clear = (0, _flyUtil.defer)(_rimraf2["default"]);
var _ = (0, _debug2["default"])("fly");

var Fly = (function (_Emitter) {
  _inherits(Fly, _Emitter);

  /**
    Create a new Fly instance.
    @param {String} flyfile path
    @param {Object} flyfile module
    @param {[Function]} array of plugins
  */

  function Fly() {
    var _this = this;

    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _ref$file = _ref.file;
    var file = _ref$file === undefined ? "." : _ref$file;
    var _ref$plugins = _ref.plugins;
    var plugins = _ref$plugins === undefined ? [] : _ref$plugins;
    var _ref$host = _ref.host;
    var host = _ref$host === undefined ? {} : _ref$host;

    _classCallCheck(this, Fly);

    _get(Object.getPrototypeOf(Fly.prototype), "constructor", this).call(this);
    /* âœˆ */_Object$assign2(this, {
      log: _flyUtil.log, alert: _flyUtil.alert, error: _flyUtil.error, defer: _flyUtil.defer, file: file, plugins: plugins,
      root: (0, _path.dirname)(file),
      host: host instanceof Function ? _Object$assign2(host, { "default": host }) : host,
      debug: _,
      tasks: _Object$keys(host).reduce(function (_, key) {
        return _Object$assign2(_, _defineProperty({}, key, host[key].bind(_this)));
      }, {}),
      _: { filters: [] }
    });
    plugins.forEach(function (_ref2) {
      var name = _ref2.name;
      var plugin = _ref2.plugin;

      if (!plugin) throw new Error("Did you forget to npm i -D " + name + "?");
      plugin.call(_this, (0, _debug2["default"])(name.replace("-", ":")), _("load %o", name));
    });
    _("chdir %o", this.root);
    process.chdir(this.root);
  }

  /** Write utility to help concat and target.
    @param {String} parent directory
    @param {String} base directory/file
    @param {Mixed} data
    @param {String} sourcemap
    @param {Function} promisified writer function
  */

  /**
    Compose a new yieldable sequence.
    Reset globs, filters and writer.
    @param {...String} glob patterns
    @return Fly instance. Promises resolve to { file, source }
   */

  _createClass(Fly, [{
    key: "source",
    value: function source() {
      for (var _len = arguments.length, globs = Array(_len), _key = 0; _key < _len; _key++) {
        globs[_key] = arguments[_key];
      }

      _Object$assign2(this, { _: { filters: [], globs: (0, _flyUtil.flatten)(globs) } });
      this._.cat = undefined;
      _("source %o", this._.globs);
      return this;
    }

    /**
      Add filter / transform function.
      Create a closure bound to the current Fly instance.
      @param {String|Function} name or filter callback
      @param [{Function}] callback with the signature (cb, options) => {}
    */
  }, {
    key: "filter",
    value: function filter(name, cb) {
      if (name instanceof Function) this.filter({ cb: name });else if (typeof name === "object") this._.filters.push(name);else {
        if (this[name] instanceof Function) throw new RangeError(name + " method already defined in instance.");
        this[name] = function (options) {
          for (var _len2 = arguments.length, rest = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            rest[_key2 - 1] = arguments[_key2];
          }

          (0, _debug2["default"])("fly")(name + " %o, %o", options, rest);
          return this.filter({ cb: cb, options: options, rest: rest });
        };
      }
      return this;
    }

    /**
      Watch IO events in globs and run tasks.
      @param {[String]} glob patterns to observe for changes
      @param {[String]} list of tasks to run on changes
      @param {Object} start options. See Fly.proto.start
    */
  }, {
    key: "watch",
    value: function watch(globs, tasks, options) {
      var _this2 = this;

      _("watch %o", globs);
      return this.emit("fly_watch").start(tasks, options).then(function () {
        return _chokidar2["default"].watch((0, _flyUtil.flatten)([globs]), { ignoreInitial: true }).on("all", function () {
          return _this2.start(tasks, options);
        });
      });
    }

    /**
      Unwrap/expand source globs to files.
      @param {Function} onFulfilled
      @param {Function} onRejected
    */
  }, {
    key: "unwrap",
    value: function unwrap(onFulfilled, onRejected) {
      var _this3 = this;

      return new _Promise(function (resolve, reject) {
        return _Promise.all(_this3._.globs.map(function (glob) {
          return (0, _flyUtil.expand)(glob);
        })).then(function (files) {
          return resolve.call(_this3, files.reduce(function (arr, item) {
            return arr.concat(item);
          }));
        })["catch"](reject);
      }).then(onFulfilled)["catch"](onRejected);
    }

    /**
      @private Execute a task.
      @param {String} name of the task
      @param {Mixed} initial value to pass into the task
      @param {Object} Fly instance the task should be bound to
    */
  }, {
    key: "exec",
    value: _regeneratorRuntime.mark(function exec(task, value) {
      var inject = arguments.length <= 2 || arguments[2] === undefined ? this : arguments[2];
      var start;
      return _regeneratorRuntime.wrap(function exec$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _("run %o", task);
            context$2$0.prev = 1;
            start = new Date();

            this.emit("task_start", { task: task });
            context$2$0.next = 6;
            return this.host[task].call(inject, value);

          case 6:
            context$2$0.t0 = context$2$0.sent;

            if (context$2$0.t0) {
              context$2$0.next = 9;
              break;
            }

            context$2$0.t0 = value;

          case 9:
            value = context$2$0.t0;

            this.emit("task_complete", {
              task: task, duration: new Date().getTime() - start
            });
            context$2$0.next = 16;
            break;

          case 13:
            context$2$0.prev = 13;
            context$2$0.t1 = context$2$0["catch"](1);
            this.emit("task_error", { task: task, error: context$2$0.t1 });

          case 16:
            return context$2$0.abrupt("return", value);

          case 17:
          case "end":
            return context$2$0.stop();
        }
      }, exec, this, [[1, 13]]);
    })

    /**
      Run one or more tasks. Each task's return value cascades on to the next
      task in a sequence.
      @param {Array} list of tasks
      @return {Promise}
     */
  }, {
    key: "start",
    value: function start() {
      var _this5 = this;

      var tasks = arguments.length <= 0 || arguments[0] === undefined ? "default" : arguments[0];

      var _ref3 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var _ref3$parallel = _ref3.parallel;
      var parallel = _ref3$parallel === undefined ? false : _ref3$parallel;
      var value = _ref3.value;

      _("start %o in " + (parallel ? "parallel" : "sequence"), tasks);
      return _co2["default"].call(this, _regeneratorRuntime.mark(function callee$2$0(tasks) {
        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, task;

        return _regeneratorRuntime.wrap(function callee$2$0$(context$3$0) {
          var _this4 = this;

          while (1) switch (context$3$0.prev = context$3$0.next) {
            case 0:
              if (!parallel) {
                context$3$0.next = 5;
                break;
              }

              context$3$0.next = 3;
              return tasks.map(function (task) {
                return _this4.exec(task, value, _Object$create(_this4));
              });

            case 3:
              context$3$0.next = 32;
              break;

            case 5:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              context$3$0.prev = 8;
              _iterator = _getIterator(tasks);

            case 10:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                context$3$0.next = 18;
                break;
              }

              task = _step.value;
              context$3$0.next = 14;
              return this.exec(task, value);

            case 14:
              value = context$3$0.sent;

            case 15:
              _iteratorNormalCompletion = true;
              context$3$0.next = 10;
              break;

            case 18:
              context$3$0.next = 24;
              break;

            case 20:
              context$3$0.prev = 20;
              context$3$0.t0 = context$3$0["catch"](8);
              _didIteratorError = true;
              _iteratorError = context$3$0.t0;

            case 24:
              context$3$0.prev = 24;
              context$3$0.prev = 25;

              if (!_iteratorNormalCompletion && _iterator["return"]) {
                _iterator["return"]();
              }

            case 27:
              context$3$0.prev = 27;

              if (!_didIteratorError) {
                context$3$0.next = 30;
                break;
              }

              throw _iteratorError;

            case 30:
              return context$3$0.finish(27);

            case 31:
              return context$3$0.finish(24);

            case 32:
              return context$3$0.abrupt("return", value);

            case 33:
            case "end":
              return context$3$0.stop();
          }
        }, callee$2$0, this, [[8, 20, 24, 32], [25,, 27, 31]]);
      }), [].concat(tasks).filter(function (task) {
        return ~_Object$keys(_this5.host).indexOf(task) || !_this5.emit("task_not_found", { task: task });
      }));
    }

    /**
      Deferred rimraf wrapper.
      @param {...String} paths
     */
  }, {
    key: "clear",
    value: function clear() {
      for (var _len3 = arguments.length, paths = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        paths[_key3] = arguments[_key3];
      }

      _("clear %o", paths);
      return (0, _flyUtil.flatten)(paths).map(function (path) {
        return _clear(path);
      });
    }

    /**
      Writer based in fs/mz appendFile.
      @param {String} file name
     */
  }, {
    key: "concat",
    value: function concat(base) {
      this._.cat = new _concatWithSourcemaps2["default"](true, base, "\n");
      this._.cat.base = base;
      return this;
    }

    /**
      Resolve a yieldable sequence.
      Reduce source with filters and invoke writer.
      @param {Array} target directories
      @return {Promise}
     */
  }, {
    key: "target",
    value: function target() {
      for (var _len4 = arguments.length, dirs = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        dirs[_key4] = arguments[_key4];
      }

      return _co2["default"].call(this, _regeneratorRuntime.mark(function callee$2$0() {
        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _loop, _iterator2, _step2, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4;

        return _regeneratorRuntime.wrap(function callee$2$0$(context$3$0) {
          var _this6 = this;

          while (1) switch (context$3$0.prev = context$3$0.next) {
            case 0:
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              context$3$0.prev = 3;
              _loop = _regeneratorRuntime.mark(function callee$3$0() {
                var glob, file, _parse, base, ext, data, map, filter, res;

                return _regeneratorRuntime.wrap(function callee$3$0$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      glob = _step2.value;
                      _iteratorNormalCompletion3 = true;
                      _didIteratorError3 = false;
                      _iteratorError3 = undefined;
                      context$4$0.prev = 4;
                      context$4$0.next = 7;
                      return (0, _flyUtil.expand)(glob);

                    case 7:
                      context$4$0.t0 = _Symbol$iterator;
                      _iterator3 = context$4$0.sent[context$4$0.t0]();

                    case 9:
                      if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                        context$4$0.next = 58;
                        break;
                      }

                      file = _step3.value;
                      _parse = (0, _path.parse)(file);
                      base = _parse.base;
                      ext = _parse.ext;
                      context$4$0.next = 16;
                      return (0, _mzFs.readFile)(file);

                    case 16:
                      data = context$4$0.sent;
                      map = undefined;
                      _iteratorNormalCompletion4 = true;
                      _didIteratorError4 = false;
                      _iteratorError4 = undefined;
                      context$4$0.prev = 21;
                      _iterator4 = _getIterator(this._.filters);

                    case 23:
                      if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                        context$4$0.next = 34;
                        break;
                      }

                      filter = _step4.value;
                      context$4$0.next = 27;
                      return _Promise.resolve(filter.cb.apply(this, [data, _Object$assign2({ filename: base }, filter.options)].concat(filter.rest)));

                    case 27:
                      res = context$4$0.sent;

                      data = res.code || res.js || res.css || res.data || res || data;
                      ext = res.ext || res.extension || ext;
                      map = res.map;

                    case 31:
                      _iteratorNormalCompletion4 = true;
                      context$4$0.next = 23;
                      break;

                    case 34:
                      context$4$0.next = 40;
                      break;

                    case 36:
                      context$4$0.prev = 36;
                      context$4$0.t1 = context$4$0["catch"](21);
                      _didIteratorError4 = true;
                      _iteratorError4 = context$4$0.t1;

                    case 40:
                      context$4$0.prev = 40;
                      context$4$0.prev = 41;

                      if (!_iteratorNormalCompletion4 && _iterator4["return"]) {
                        _iterator4["return"]();
                      }

                    case 43:
                      context$4$0.prev = 43;

                      if (!_didIteratorError4) {
                        context$4$0.next = 46;
                        break;
                      }

                      throw _iteratorError4;

                    case 46:
                      return context$4$0.finish(43);

                    case 47:
                      return context$4$0.finish(40);

                    case 48:
                      data = map && ext === ".css" ? data + "\n/*# sourceMappingURL=" + base + ".map*/\n" : map && ext === ".js" ? data + "\n//# sourceMappingURL=" + base + ".map\n" : data;

                      if (!this._.cat) {
                        context$4$0.next = 53;
                        break;
                      }

                      this._.cat.add("" + base, data, map);
                      context$4$0.next = 55;
                      break;

                    case 53:
                      context$4$0.next = 55;
                      return resolve(dirs, {
                        data: data, base: _path.join.apply(undefined, _toConsumableArray((0, _path.parse)(file).dir.split(_path.sep).filter(function (path) {
                          return ! ~glob.split(_path.sep).indexOf(path);
                        })).concat(["" + (0, _path.parse)(file).name + ext])),
                        map: this._.cat && this._.cat.sourceMap
                      });

                    case 55:
                      _iteratorNormalCompletion3 = true;
                      context$4$0.next = 9;
                      break;

                    case 58:
                      context$4$0.next = 64;
                      break;

                    case 60:
                      context$4$0.prev = 60;
                      context$4$0.t2 = context$4$0["catch"](4);
                      _didIteratorError3 = true;
                      _iteratorError3 = context$4$0.t2;

                    case 64:
                      context$4$0.prev = 64;
                      context$4$0.prev = 65;

                      if (!_iteratorNormalCompletion3 && _iterator3["return"]) {
                        _iterator3["return"]();
                      }

                    case 67:
                      context$4$0.prev = 67;

                      if (!_didIteratorError3) {
                        context$4$0.next = 70;
                        break;
                      }

                      throw _iteratorError3;

                    case 70:
                      return context$4$0.finish(67);

                    case 71:
                      return context$4$0.finish(64);

                    case 72:
                    case "end":
                      return context$4$0.stop();
                  }
                }, callee$3$0, _this6, [[4, 60, 64, 72], [21, 36, 40, 48], [41,, 43, 47], [65,, 67, 71]]);
              });
              _iterator2 = _getIterator(this._.globs);

            case 6:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                context$3$0.next = 11;
                break;
              }

              return context$3$0.delegateYield(_loop(), "t0", 8);

            case 8:
              _iteratorNormalCompletion2 = true;
              context$3$0.next = 6;
              break;

            case 11:
              context$3$0.next = 17;
              break;

            case 13:
              context$3$0.prev = 13;
              context$3$0.t1 = context$3$0["catch"](3);
              _didIteratorError2 = true;
              _iteratorError2 = context$3$0.t1;

            case 17:
              context$3$0.prev = 17;
              context$3$0.prev = 18;

              if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                _iterator2["return"]();
              }

            case 20:
              context$3$0.prev = 20;

              if (!_didIteratorError2) {
                context$3$0.next = 23;
                break;
              }

              throw _iteratorError2;

            case 23:
              return context$3$0.finish(20);

            case 24:
              return context$3$0.finish(17);

            case 25:
              if (!this._.cat) {
                context$3$0.next = 28;
                break;
              }

              context$3$0.next = 28;
              return resolve(dirs, {
                data: this._.cat.content,
                base: this._.cat.base,
                write: _mzFs.appendFile,
                map: this._.cat && this._.cat.sourceMap
              });

            case 28:
            case "end":
              return context$3$0.stop();
          }
        }, callee$2$0, this, [[3, 13, 17, 25], [18,, 20, 24]]);
      }));
    }
  }]);

  return Fly;
})(_emitter2["default"]);

exports["default"] = Fly;
function resolve(dirs, _ref4) {
  var base = _ref4.base;
  var data = _ref4.data;
  var map = _ref4.map;
  var _ref4$write = _ref4.write;
  var write = _ref4$write === undefined ? _mzFs.writeFile : _ref4$write;

  var _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, dir, file;

  return _regeneratorRuntime.wrap(function resolve$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _iteratorNormalCompletion5 = true;
        _didIteratorError5 = false;
        _iteratorError5 = undefined;
        context$1$0.prev = 3;
        _iterator5 = _getIterator((0, _flyUtil.flatten)(dirs));

      case 5:
        if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
          context$1$0.next = 15;
          break;
        }

        dir = _step5.value;
        file = (0, _path.join)(dir, base);

        _mkdirp2["default"].sync((0, _path.dirname)(file));
        context$1$0.next = 11;
        return write(file, data);

      case 11:
        if (map) (0, _mzFs.writeFile)(file + ".map", JSON.stringify(_Object$assign2(map, { file: base })));

      case 12:
        _iteratorNormalCompletion5 = true;
        context$1$0.next = 5;
        break;

      case 15:
        context$1$0.next = 21;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t0 = context$1$0["catch"](3);
        _didIteratorError5 = true;
        _iteratorError5 = context$1$0.t0;

      case 21:
        context$1$0.prev = 21;
        context$1$0.prev = 22;

        if (!_iteratorNormalCompletion5 && _iterator5["return"]) {
          _iterator5["return"]();
        }

      case 24:
        context$1$0.prev = 24;

        if (!_didIteratorError5) {
          context$1$0.next = 27;
          break;
        }

        throw _iteratorError5;

      case 27:
        return context$1$0.finish(24);

      case 28:
        return context$1$0.finish(21);

      case 29:
      case "end":
        return context$1$0.stop();
    }
  }, marked0$0[0], this, [[3, 17, 21, 29], [22,, 24, 28]]);
}
module.exports = exports["default"];